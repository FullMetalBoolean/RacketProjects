#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.5 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 32 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 69 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 0 1
#"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 44 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 46 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 21 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1           0 1198 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 190
(
 #"#reader(lib \"htdp-advanced-reader.ss\" \"lang\")((modname CaesarCip"
 #"herRevision) (read-case-sensitive #t) (teachpacks ()) (htdp-settings"
 #" #(#t constructor repeating-decimal #t #t none #f () #f)))"
) 0 0 4 29 1 #"\n"
0 0 15 3 4 #"when"
0 0 17 3 22 #";Jeremy Reuwer 5580983"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; Purpose: given a letter, return a number"
0 0 24 29 1 #"\n"
0 0 17 3 27 #"; Signature: string->number"
0 0 24 29 1 #"\n"
0 0 17 3 12 #"; Examples: "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 6 #"encode"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 17 3 38 #";A should be the first numerical value"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 6 #"encode"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Z\""
0 0 24 3 2 #") "
0 0 21 3 2 #"25"
0 0 24 3 2 #") "
0 0 17 3 21 #";Z should be the last"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 7 #"; Stub:"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";(define (encode letter) -1) check for integer"
0 0 24 29 1 #"\n"
0 0 17 3 11 #"; Template:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"encode"
0 0 24 3 1 #" "
0 0 14 3 6 #"letter"
0 0 24 3 2 #") "
0 0 17 3 42 #";create encoding that consumes base letter"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 11 #"string->int"
0 0 24 3 1 #" "
0 0 14 3 6 #"letter"
0 0 24 3 3 #") ("
0 0 14 3 11 #"string->int"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 24 3 3 #")) "
0 0 17 3 37 #";convert character to numerical value"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; Purpose: Given a number, return a letter"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; Signature: Number -> String"
0 0 24 29 1 #"\n"
0 0 17 3 11 #"; Examples:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 6 #"decode"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 19 3 3 #"\"A\""
0 0 24 3 2 #") "
0 0 17 3 17 #";A should be zero"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 6 #"decode"
0 0 24 3 1 #" "
0 0 21 3 2 #"25"
0 0 24 3 2 #") "
0 0 19 3 3 #"\"Z\""
0 0 24 3 2 #") "
0 0 17 3 15 #";Z should be 25"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 6 #"decode"
0 0 24 3 2 #" ("
0 0 14 3 6 #"encode"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"M\""
0 0 24 3 3 #")) "
0 0 19 3 3 #"\"M\""
0 0 24 3 2 #") "
0 0 17 3 37 #";M should be coded and come back as M"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";Stub:"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";(define (decode num) -1) check for integers"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";Code:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"decode"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 2 #") "
0 0 17 3 41 #";decode using letter correspodning number"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"int->string"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 11 #"string->int"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 24 3 2 #") "
0 0 14 3 3 #"num"
0 0 24 3 3 #")) "
0 0 17 3 47 #";given number return alphabetical correspondant"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";Purpose: given letter and a key return encrypted letter"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";Signature string string -> string"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";Examples"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"encrypt-letter"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"B\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\"B\""
0 0 24 3 2 #") "
0 0 17 3 36 #";check for result based on given key"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"encrypt-letter"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"B\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"B\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\"C\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"encrypt-letter"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Y\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"B\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\"Z\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"encrypt-letter"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Z\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"B\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\"A\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"encrypt-letter"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"C\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\"C\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";Stub"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";(define (encrypt-letter letter) -1) check for integers"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";Template"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";(define (encrypt-letter letter) "
0 0 24 29 1 #"\n"
0 0 17 3 34 #";  (decode (+ (encode \"A\") shift))"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";  )"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";Code"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"encrypt-letter"
0 0 24 3 1 #" "
0 0 14 3 6 #"letter"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 2 #") "
0 0 17 3 38 #";encrypt character based on letter key"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"encode"
0 0 24 3 1 #" "
0 0 14 3 6 #"letter"
0 0 24 3 3 #") ("
0 0 14 3 6 #"encode"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 3 #")) "
0 0 21 3 2 #"25"
0 0 24 3 2 #") "
0 0 17 3 59
#";add values of letter and key and compare them to alphabet "
0 0 17 3 6 #"length"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"decode"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"encode"
0 0 24 3 1 #" "
0 0 14 3 6 #"letter"
0 0 24 3 3 #") ("
0 0 14 3 6 #"encode"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 3 #")) "
0 0 21 3 2 #"26"
0 0 24 3 3 #")) "
0 0 17 3 14 #";if not decode"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"decode"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"encode"
0 0 24 3 1 #" "
0 0 14 3 6 #"letter"
0 0 24 3 3 #") ("
0 0 14 3 6 #"encode"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 4 #"))) "
0 0 17 3 12 #";decode if A"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";Purpose: Take a letter and turn into plain text, using given key"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";signature: string string -> string"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";examples:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"decrypt-letter"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"B\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"B\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\"A\""
0 0 24 3 2 #") "
0 0 17 3 34 #";check for decryption based on key"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"decrypt-letter"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"C\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"B\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\"B\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"decrypt-letter"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Z\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"B\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\"Y\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"decrypt-letter"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"B\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\"Z\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"decrypt-letter"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"C\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"C\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\"A\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";Stub:"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";(define (decrypt-letter letter key) -1)"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";Template:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"decrypt-letter"
0 0 24 3 1 #" "
0 0 14 3 6 #"letter"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 2 #") "
0 0 17 3 39 #";consumes two parameters letter and key"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 6 #"encode"
0 0 24 3 1 #" "
0 0 14 3 6 #"letter"
0 0 24 3 3 #") ("
0 0 14 3 6 #"encode"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 17 3 15 #";decrypts for a"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"decode"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 6 #"encode"
0 0 24 3 1 #" "
0 0 14 3 6 #"letter"
0 0 24 3 3 #") ("
0 0 14 3 6 #"encode"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 3 #")) "
0 0 21 3 2 #"26"
0 0 24 3 3 #")) "
0 0 17 3 26 #";decrypts for rest of body"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"decode"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 6 #"encode"
0 0 24 3 1 #" "
0 0 14 3 6 #"letter"
0 0 24 3 3 #") ("
0 0 14 3 6 #"encode"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 4 #"))) "
0 0 17 3 13 #";stop decrypt"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 91
(
 #"; Purpose: creates function that takes key and returns a function us"
 #"ing that key to encrypt"
) 0 0 24 29 1 #"\n"
0 0 17 3 31 #"; Signature: string -> function"
0 0 24 29 1 #"\n"
0 0 17 3 11 #"; Examples:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 3 #" (("
0 0 14 3 12 #"make-encrypt"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"B\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\"A\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\"B\""
0 0 24 3 2 #") "
0 0 17 3 45 #";check for correct change with key assignment"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 3 #" (("
0 0 14 3 12 #"make-encrypt"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Z\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\"Y\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\"X\""
0 0 24 3 2 #") "
0 0 17 3 45 #";check for correct change with key assignment"
0 0 24 29 1 #"\n"
0 0 17 3 7 #"; Code:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"make-encrypt"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 2 #") "
0 0 17 3 54 #";function only needs key to reassign during encryption"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 2 #"\316\273"
0 0 24 3 1 #"("
0 0 14 3 6 #"letter"
0 0 24 3 3 #") ("
0 0 14 3 14 #"encrypt-letter"
0 0 24 3 1 #" "
0 0 14 3 6 #"letter"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 3 #")) "
0 0 17 3 46 #";burte-force the fucniton with assigned letter"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 86
(
 #"; Purpose: Creates function that takes key and returns a function us"
 #"ing key to decrypt"
) 0 0 24 29 1 #"\n"
0 0 17 3 31 #"; Signature: string -> function"
0 0 24 29 1 #"\n"
0 0 17 3 11 #"; Examples:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 3 #" (("
0 0 14 3 12 #"make-decrypt"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"B\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\"B\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\"A\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 3 #" (("
0 0 14 3 12 #"make-decrypt"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Z\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\"X\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\"Y\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 3 #" (("
0 0 14 3 12 #"make-decrypt"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 24 3 4 #") (("
0 0 14 3 12 #"make-encrypt"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\"G\""
0 0 24 3 3 #")) "
0 0 19 3 3 #"\"G\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 7 #"; Code:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"make-decrypt"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 2 #") "
0 0 17 3 59
#";create fucntion to assign a decode key with said parameter"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 2 #"\316\273"
0 0 24 3 1 #"("
0 0 14 3 6 #"letter"
0 0 24 3 3 #") ("
0 0 14 3 14 #"decrypt-letter"
0 0 24 3 1 #" "
0 0 14 3 6 #"letter"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 4 #"))) "
0 0 17 3 53 #";return numerical value of the character for decoding"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 21 #"caesar-encrypt-string"
0 0 24 3 1 #" "
0 0 14 3 4 #"text"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 2 #") "
0 0 17 3 25 #";encrypt consumed string "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"implode"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 14 3 12 #"make-encrypt"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 3 #") ("
0 0 14 3 7 #"explode"
0 0 24 3 1 #" "
0 0 14 3 4 #"text"
0 0 24 3 5 #")))) "
0 0 17 3 52 #";expand string and encrypt each character according "
0 0 17 3 10 #"to the key"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 21 #"caesar-decrypt-string"
0 0 24 3 1 #" "
0 0 14 3 4 #"text"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 2 #") "
0 0 17 3 25 #";decrypt consumed string "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"implode"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 14 3 12 #"make-decrypt"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 3 #") ("
0 0 14 3 7 #"explode"
0 0 24 3 1 #" "
0 0 14 3 4 #"text"
0 0 24 3 5 #")))) "
0 0 17 3 52 #";expand string and decrypt each character according "
0 0 17 3 10 #"to the key"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"decode-brute-force"
0 0 24 3 1 #" "
0 0 14 3 9 #"plaintext"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 8 #"current-"
0 0 24 29 1 #"\n"
0 0 19 3 82
(
 #"\"------------------------------------------------------------------"
 #"--------------\""
) 0 0 24 29 1 #"\n"
0 7         463 4           0 0           0 76 0 15 3 4 #"when"
0 0 24 3 1 #" "
0 0 14 3 5 #"using"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"("
0 0 19 3 22 #"caesar-encrypt-string "
0 0 19 3 1 #"\""
0 0 14 3 1 #"N"
0 0 19 3 1 #"\""
0 0 19 3 2 #" ("
0 0 19 3 22 #"caesar-encrypt-string "
0 0 19 3 1 #"\""
0 0 14 3 1 #"N"
0 0 19 3 2 #"\" "
0 0 19 3 1 #"\""
0 0 14 3 5 #"HELLO"
0 0 19 3 1 #"\""
0 0 19 3 3 #"))\""
0 0 24 29 1 #"\n"
0 0 14 3 2 #"we"
0 0 24 3 1 #" "
0 0 14 3 3 #"get"
0 0 24 3 1 #" "
0 0 14 3 3 #"the"
0 0 24 3 1 #" "
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"string->int:"
0 0 19 3 1 #" "
0 0 19 3 8 #"expected"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 8 #"1-letter"
0 0 19 3 1 #" "
0 0 19 3 6 #"string"
0 0 19 3 1 #","
0 0 19 3 1 #" "
0 0 19 3 3 #"but"
0 0 19 3 1 #" "
0 0 19 3 9 #"received "
0 0 19 3 1 #"\""
0 0 14 3 5 #"HELLO"
0 0 19 3 2 #"\"\""
0 0 24 29 1 #"\n"
0 0 14 3 7 #"becuase"
0 0 24 3 1 #" "
0 0 14 3 21 #"caesar-encrypt-string"
0 0 24 3 1 #" "
0 0 14 3 4 #"must"
0 0 24 3 1 #" "
0 0 14 3 4 #"take"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 6 #"string"
0 0 24 3 1 #" "
0 0 14 3 4 #"that"
0 0 24 3 1 #" "
0 0 14 3 2 #"is"
0 0 24 3 1 #" "
0 0 14 3 7 #"loonger"
0 0 24 3 1 #" "
0 0 14 3 4 #"than"
0 0 24 3 1 #" "
0 0 14 3 3 #"one"
0 0 24 3 1 #" "
0 0 14 3 9 #"character"
0 0 24 3 1 #" "
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 14 3 5 #"order"
0 0 24 3 1 #" "
0 0 14 3 2 #"to"
0 0 24 3 1 #" "
0 0 14 3 9 #"evaluate."
0           0 0 0 24 29 1 #"\n"
0 0 19 3 84
(
 #"\"------------------------------------------------------------------"
 #"----------------\""
) 0 0 24 29 1 #"\n"
0 0 17 3 96
(
 #";Purpose: To create function to find number of years it would take t"
 #"o calculate all permutations"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"calc-speed"
0 0 24 3 1 #" "
0 0 21 3 4 #"1000"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"factorial"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #") "
0 0 17 3 41 #";create function for factorial calulation"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 17 3 12 #";1 factorial"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 17 3 25 #";returns 1 mathematically"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 9 #"factorial"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 6 #"))))) "
0 0 17 3 28 #";recursion and multiplaction"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"all-possible-engima"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #")) "
0 0 17 3 19 #";rotor permutations"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 4 #"expt"
0 0 24 3 1 #" "
0 0 21 3 2 #"26"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 17 3 20 #";letter permutations"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 9 #"factorial"
0 0 24 3 1 #" "
0 0 21 3 2 #"26"
0 0 24 3 3 #") ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 9 #"factorial"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 3 #") ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 9 #"factorial"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #") ("
0 0 14 3 4 #"expt"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 5 #")))) "
0 0 17 3 34 #";playboard permutation possiblites"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"seconds-in-year"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 3 #"365"
0 0 24 3 1 #" "
0 0 21 3 2 #"24"
0 0 24 3 1 #" "
0 0 21 3 2 #"60"
0 0 24 3 1 #" "
0 0 21 3 2 #"60"
0 0 24 3 3 #")) "
0 0 17 3 33 #";find number of seconds in a year"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"calc-years"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 19 #"all-possible-engima"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 10 #"calc-speed"
0 0 24 3 1 #" "
0 0 14 3 15 #"seconds-in-year"
0 0 24 3 4 #"))) "
0 0 17 3 24 #";calculate all possible "
0 0 17 3 45 #"combinations, oer 1000, per second solutions."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"enigma-years"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 59
#"\"Number of years it would take to calc all enigma combos: \""
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 1 #" "
0 0 14 3 10 #"calc-years"
0 0 24 3 4 #"))) "
0 0 17 3 23 #";number of years needed"
0 0 24 29 1 #"\n"
0 0 14 3 12 #"enigma-years"
0 0 24 29 1 #"\n"
0 0 19 3 84
(
 #"\"------------------------------------------------------------------"
 #"----------------\""
) 0 0 24 29 1 #"\n"
0 0 17 3 63
#"; Purpose:Given an encrypted message and a cript; return false,"
0 0 24 29 1 #"\n"
0 0 17 3 90
(
 #"; if the crypt contains the same characrters as the encrypted messge"
 #" at the same position."
) 0 0 24 29 1 #"\n"
0 0 17 3 36 #"; Signature:string string -> boolean"
0 0 24 29 1 #"\n"
0 0 17 3 11 #"; Examples:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"crypt-check"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"ARMY\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"OIZU\""
0 0 24 3 2 #") "
0 0 21 3 5 #"#true"
0 0 24 3 2 #") "
0 0 17 3 29 #";check for phrase and boolean"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"crypt-check"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"ARMY\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"OIMU\""
0 0 24 3 2 #") "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"crypt-check"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 24 3 2 #") "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"crypt-check"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"B\""
0 0 24 3 2 #") "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"crypt-check"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 2 #") "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 7 #"; Stub:"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";(define (crypt-check crypt encrypted-message) -1) ;check for intege"
 #"rs"
) 0 0 24 29 1 #"\n"
0 0 17 3 11 #"; Template:"
0 0 24 29 1 #"\n"
0 0 17 3 7 #"; Code:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"crypt-check"
0 0 24 3 1 #" "
0 0 14 3 5 #"crypt"
0 0 24 3 1 #" "
0 0 14 3 17 #"encrypted-message"
0 0 24 3 2 #") "
0 0 17 3 51 #";check given msg wtih crypt key pased of parameters"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 16 #"crypt-list-check"
0 0 24 3 2 #" ("
0 0 14 3 7 #"explode"
0 0 24 3 1 #" "
0 0 14 3 5 #"crypt"
0 0 24 3 3 #") ("
0 0 14 3 7 #"explode"
0 0 24 3 1 #" "
0 0 14 3 17 #"encrypted-message"
0 0 24 3 3 #")) "
0 0 17 3 39 #";explode string and check the list for "
0 0 17 3 11 #"the element"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 102
(
 #";purpose: given 2 lists compare the elements of each list against ea"
 #"ch other and return false if they "
) 0 0 17 3 34 #"match and true if they don't match"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";signature: list list -> boolean"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";examples"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 16 #"crypt-list-check"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 3 #")) "
0 0 21 3 5 #"#true"
0 0 24 3 2 #") "
0 0 17 3 27 #";list is the same of itself"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 16 #"crypt-list-check"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"R\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"M\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Y\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"O\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"I\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Z\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"U\""
0 0 24 3 3 #")) "
0 0 21 3 5 #"#true"
0 0 24 3 2 #") "
0 0 17 3 19 #";true if dont match"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 16 #"crypt-list-check"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"R\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"M\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Y\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"O\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"I\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"M\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"U\""
0 0 24 3 3 #")) "
0 0 21 3 6 #"#false"
0 0 24 3 2 #") "
0 0 17 3 15 #";flase if match"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";Stub"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";(define (crypt-list-check crypt encrypted-message) -1) check for in"
 #"tegers"
) 0 0 24 29 1 #"\n"
0 0 17 3 10 #";Template:"
0 0 24 29 1 #"\n"
0 0 17 3 52 #"; (define (crypt-list-check crypt encrypted-message)"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";   (cond"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";     ((...) ...)"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";     (else ...)"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";     )"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";   )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";Code"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"crypt-list-check"
0 0 24 3 1 #" "
0 0 14 3 5 #"crypt"
0 0 24 3 1 #" "
0 0 14 3 17 #"encrypted-message"
0 0 24 3 2 #") "
0 0 17 3 33 #";create funciton above parameters"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 17 3 19 #";cond for recursion"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 5 #"crypt"
0 0 24 3 2 #") "
0 0 21 3 5 #"#true"
0 0 24 3 2 #") "
0 0 17 3 52 #";if the list is empty than theres nothing to compare"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 8 #"string=?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"crypt"
0 0 24 3 3 #") ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 17 #"encrypted-message"
0 0 24 3 3 #")) "
0 0 21 3 6 #"#false"
0 0 24 3 2 #") "
0 0 17 3 37 #";if the first element matches return "
0 0 17 3 22 #"flase for confirmation"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 16 #"crypt-list-check"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"crypt"
0 0 24 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 17 #"encrypted-message"
0 0 24 3 4 #"))) "
0 0 17 3 10 #";recursion"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"encrypted-message"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 19 3 56
#"\"OIZUHBTOTCBRGQUXTORPBOBAOZRHKMPJYIXJAXETIYMHVBTZKASNGR\""
0 0 24 3 2 #") "
0 0 17 3 32 #";this is the given encrypted msg"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"crypts"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 19 3 6 #"\"ARMY\""
0 0 24 3 1 #" "
0 0 19 3 9 #"\"GENERAL\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"HEIL\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"HITLER\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"HQ\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"MORE\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"ROMMEL\""
0 0 24 3 1 #" "
0 0 19 3 11 #"\"SAURKRAUT\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"SEND\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"SIGNED\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"TO\""
0 0 24 3 3 #")) "
0 0 17 3 13 #";this is the "
0 0 17 3 32 #"suspected result given in prompt"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";crypt checks"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 11 #"crypt-check"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"TO\""
0 0 24 3 1 #" "
0 0 14 3 17 #"encrypted-message"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 11 #"crypt-check"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"ROMMEL\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"substring"
0 0 24 3 1 #" "
0 0 14 3 17 #"encrypted-message"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 24 3 1 #" "
0 0 14 3 17 #"encrypted-message"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-length"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"ROMMEL\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 11 #"crypt-check"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"TOHQ\""
0 0 24 3 1 #" "
0 0 14 3 17 #"encrypted-message"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 11 #"crypt-check"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"TOHQSEND\""
0 0 24 3 1 #" "
0 0 14 3 17 #"encrypted-message"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 11 #"crypt-check"
0 0 24 3 1 #" "
0 0 19 3 27 #"\"TOHQSENDARMYMORESAURKRAUT\""
0 0 24 3 1 #" "
0 0 14 3 17 #"encrypted-message"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 11 #"crypt-check"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"SIGNEDGENERALROMMEL\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"substring"
0 0 24 3 1 #" "
0 0 14 3 17 #"encrypted-message"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 24 3 1 #" "
0 0 14 3 17 #"encrypted-message"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-length"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"SIGNEDGENERALROMMEL\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 11 #"crypt-check"
0 0 24 3 1 #" "
0 0 19 3 56
#"\"TOARMYHQSENDMORESAURKRAUTHEILHITLERSIGNEDGENERALROMMEL\""
0 0 24 3 1 #" "
0 0 14 3 17 #"encrypted-message"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0           0
